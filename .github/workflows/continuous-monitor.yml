name: Continuous Monitor

on:
  schedule:
    - cron: '* * * * *'  # Every minute
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: pip install -r requirements.txt
      - name: Continuous monitoring
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          GITHUB_ACTIONS: 'true'
          MONITOR_ID: 'CONTINUOUS'
        run: |
          python -c "
          import asyncio
          import time
          import aiohttp
          import os
          import zipfile
          from io import BytesIO
          from datetime import datetime
          
          DISCORD_WEBHOOK_URL = os.getenv('DISCORD_WEBHOOK_URL')
          URL = 'https://results.beup.ac.in/BTech5thSem2024_B2022Results.aspx'
          MONITOR_ID = os.getenv('MONITOR_ID', 'CONTINUOUS')
          
          RESULT_URLS = [
              'https://results.beup.ac.in/ResultsBTech5thSem2024_B2022Pub.aspx?Sem=V&RegNo=22156148040',
              'https://results.beup.ac.in/ResultsBTech5thSem2024_B2022Pub.aspx?Sem=V&RegNo=22156148042',
              'https://results.beup.ac.in/ResultsBTech5thSem2024_B2022Pub.aspx?Sem=V&RegNo=22156148051',
              'https://results.beup.ac.in/ResultsBTech5thSem2024_B2022Pub.aspx?Sem=V&RegNo=22156148018',
              'https://results.beup.ac.in/ResultsBTech5thSem2024_B2022Pub.aspx?Sem=V&RegNo=22156148012'
          ]
          
          async def continuous_check():
              try:
                  async with aiohttp.ClientSession() as session:
                      last_status = None
                      
                      # Check continuously for 50 seconds
                      end_time = time.time() + 50
                      check_count = 0
                      
                      while time.time() < end_time:
                          check_count += 1
                          start_time = time.time()
                          
                          try:
                              async with session.get(URL, timeout=aiohttp.ClientTimeout(total=5)) as resp:
                                  current_status = 'UP' if resp.status == 200 else 'DOWN'
                              
                              # Send update if status changed or every 10 checks
                              if current_status != last_status or check_count % 10 == 0:
                                  timestamp = datetime.now().strftime('%H:%M:%S')
                                  
                                  if current_status == 'UP' and last_status != 'UP':
                                      # WEBSITE IS LIVE! Start immediate download
                                      payload = {
                                          'content': f'🎉[{MONITOR_ID}] **WEBSITE IS LIVE!** [{timestamp}] Starting download...',
                                          'username': f'Ultra Monitor {MONITOR_ID}'
                                      }
                                      
                                      try:
                                          async with session.post(DISCORD_WEBHOOK_URL, json=payload, timeout=5) as discord_resp:
                                              pass
                                      except:
                                          pass
                                      
                                      # Quick download of first 5 results
                                      buffer = BytesIO()
                                      try:
                                          with zipfile.ZipFile(buffer, 'w', zipfile.ZIP_DEFLATED) as zf:
                                              for i, url in enumerate(RESULT_URLS[:5]):
                                                  try:
                                                      reg = url.split('=')[-1]
                                                      async with session.get(url, timeout=10) as result_resp:
                                                          if result_resp.status == 200:
                                                              html = await result_resp.text()
                                                              zf.writestr(f'result_{reg}.html', html)
                                                  except:
                                                      pass
                                          
                                          # Upload ZIP file
                                          buffer.seek(0)
                                          form = aiohttp.FormData()
                                          form.add_field('file', buffer, filename='quick_results.zip', content_type='application/zip')
                                          
                                          try:
                                              async with session.post(DISCORD_WEBHOOK_URL, data=form, timeout=30) as upload_resp:
                                                  if upload_resp.status in (200, 204):
                                                      timestamp = datetime.now().strftime('%H:%M:%S')
                                                      payload = {
                                                          'content': f'📥[{MONITOR_ID}] Quick results uploaded! [{timestamp}]',
                                                          'username': f'Ultra Monitor {MONITOR_ID}'
                                                      }
                                                      async with session.post(DISCORD_WEBHOOK_URL, json=payload, timeout=5) as confirm_resp:
                                                          pass
                                          except:
                                              pass
                                      except:
                                          pass
                                  
                                  elif current_status != last_status:
                                      # Status changed to DOWN
                                      emoji = '🔴' if current_status == 'DOWN' else '✅'
                                      payload = {
                                          'content': f'{emoji}[{MONITOR_ID}] {current_status} [{timestamp}] (Check {check_count})',
                                          'username': f'Ultra Monitor {MONITOR_ID}'
                                      }
                                      
                                      try:
                                          async with session.post(DISCORD_WEBHOOK_URL, json=payload, timeout=5) as discord_resp:
                                              pass
                                      except:
                                          pass
                                  
                                  elif check_count % 10 == 0:
                                      # Periodic status update
                                      emoji = '✅' if current_status == 'UP' else '🔴'
                                      payload = {
                                          'content': f'{emoji}[{MONITOR_ID}] {current_status} [{timestamp}] (Check {check_count})',
                                          'username': f'Ultra Monitor {MONITOR_ID}'
                                      }
                                      
                                      try:
                                          async with session.post(DISCORD_WEBHOOK_URL, json=payload, timeout=5) as discord_resp:
                                              pass
                                      except:
                                          pass
                              
                              last_status = current_status
                                      
                          except asyncio.TimeoutError:
                              timestamp = datetime.now().strftime('%H:%M:%S')
                              payload = {
                                  'content': f'⏱️[{MONITOR_ID}] TIMEOUT [{timestamp}] (Check {check_count})',
                                  'username': f'Ultra Monitor {MONITOR_ID}'
                              }
                              try:
                                  async with session.post(DISCORD_WEBHOOK_URL, json=payload, timeout=5) as discord_resp:
                                      pass
                              except:
                                  pass
                              last_status = 'TIMEOUT'
                          
                          # Wait 2 seconds between checks
                          elapsed = time.time() - start_time
                          wait_time = max(0, 2 - elapsed)
                          await asyncio.sleep(wait_time)
                              
              except Exception as e:
                  print(f'Continuous monitor error: {e}')
          
          asyncio.run(continuous_check())
          "